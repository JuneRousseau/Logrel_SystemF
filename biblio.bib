@article{skorstengaardIntroductionLogicalRelations,
  title = {An {{Introduction}} to {{Logical Relations}}},
  author = {Skorstengaard, Lau},
  pages = {66},
  langid = {english},
  file = {/home/au711415/Work/Zotero/storage/HU3EX3QE/Skorstengaard - An Introduction to Logical Relations.pdf}
}

@misc{skorstengaardLogicalRelationsReferences2016,
  title = {Logical {{Relations And References}}},
  author = {Skorstengaard, Lau},
  year = {2016},
  abstract = {This note is based on lectures by Lars Birkedal and work written by Ale\v{s} Bizjak and Kasper Svendsen among others. In Section 1, a unary model for F{$\mu$},refis sketched. The main point of Section 1 is to motivate and explain the challenges that appear when we consider a language with references (Subsection 1.4 on c.o.f.e.'s is precise, the remaining subsections are somewhat sketched). Section 2 presents a relational model. This presentation is again formally precise.},
  file = {/home/au711415/Work/Zotero/storage/KR7PZ2QY/Logical-relations-and-references-v6.pdf}
}

@misc{sterlingPracticalSemantics,
  title = {Practical {{Semantics}}},
  author = {Sterling, Jon},
  abstract = {Logical relations arguments are usually phrased non-compositionally, so as to appear artificially distant from denotational semantics. We describe how a small amount of refactoring and notational adjustment exhibits standard logical relations arguments as an instance of denotational semantics. In this chapter, we work in a provisional and unstructured way, avoiding category theory at the cost of some precision.},
  howpublished = {https://www.jonmsterling.com/papers/sterling-2022-lr-tutorial.pdf},
  file = {/home/au711415/Work/Zotero/storage/SI44R874/sterling-2022-lr-tutorial.pdf}
}

@article{timanyLogicalApproachType2022,
  title = {A {{Logical Approach}} to {{Type Soundness}}},
  author = {Timany, Amin and Krebbers, Robbert and Dreyer, Derek and Birkedal, Lars},
  year = {2022},
  file = {/home/au711415/Work/Zotero/storage/5GJZX396/Timany et al. - 2022 - A Logical Approach to Type Soundness.pdf}
}

@inproceedings{wadlerTheoremsFree1989,
  title = {Theorems for Free!},
  booktitle = {Proceedings of the Fourth International Conference on {{Functional}} Programming Languages and Computer Architecture  - {{FPCA}} '89},
  author = {Wadler, Philip},
  year = {1989},
  pages = {347--359},
  publisher = {{ACM Press}},
  address = {{Imperial College, London, United Kingdom}},
  doi = {10.1145/99370.99404},
  abstract = {From the type of a polymorphic function we can derive a theorem that it satisfies. Every function of the same type satisfies the same theorem. This provides a free source of useful theorems, courtesy of Reynolds' abstraction theorem for the polymorphic lambda calculus.},
  isbn = {978-0-89791-328-7},
  langid = {english},
  file = {/home/au711415/Work/Zotero/storage/6GKU2XXL/978-3-319-48628-4_8.pdf;/home/au711415/Work/Zotero/storage/J8H669T9/Wadler - 1989 - Theorems for free!.pdf}
}

@misc{IrisProject,
  title = {Iris {{Project}}},
  howpublished = {https://iris-project.org/},
  file = {/home/au711415/Work/Zotero/storage/S4I7C6ND/iris-project.org.html}
}

@article{jungIrisGroundModular2018,
  title = {Iris from the Ground up: {{A}} Modular Foundation for Higher-Order Concurrent Separation Logic},
  shorttitle = {Iris from the Ground Up},
  author = {Jung, Ralf and Krebbers, Robbert and Jourdan, Jacques-Henri and Bizjak, Ale{\v s} and Birkedal, Lars and Dreyer, Derek},
  year = {2018},
  journal = {J. Funct. Prog.},
  volume = {28},
  pages = {e20},
  issn = {0956-7968, 1469-7653},
  doi = {10.1017/S0956796818000151},
  abstract = {Iris is a framework for higher-order concurrent separation logic, which has been implemented in the Coq proof assistant and deployed very effectively in a wide variety of verification projects. Iris was designed with the express goal of simplifying and consolidating the foundations of modern separation logics, but it has evolved over time, and the design and semantic foundations of Iris itself have yet to be fully written down and explained together properly in one place. Here, we attempt to fill this gap, presenting a reasonably complete picture of the latest version of Iris (version 3.1), from first principles and in one coherent narrative.},
  langid = {english},
  file = {/home/au711415/Work/Zotero/storage/6QE4SA7S/Jung et al. - 2018 - Iris from the ground up A modular foundation for .pdf}
}

@book{pierceTypesProgrammingLanguages2002,
  title = {Types and Programming Languages},
  author = {Pierce, Benjamin C.},
  year = {2002},
  publisher = {{MIT Press}},
  address = {{Cambridge, Mass}},
  isbn = {978-0-262-16209-8},
  langid = {english},
  lccn = {QA76.7 .P54 2002},
  keywords = {Programming languages (Electronic computers)},
}

@INPROCEEDINGS{SchaeferEtAl:2015:Autosubst:-Reasoning,
  title = {Autosubst: Reasoning with de Bruijn Terms and Parallel Substitutions},
  author = {Steven Schäfer and Tobias Tebbi and Gert Smolka},
  year = {2015},
  month = {Aug},
  editor = {Xingyuan Zhang and Christian Urban},
  publisher = {Springer-Verlag},
  booktitle = {Interactive Theorem Proving - 6th International Conference, {ITP} 2015, Nanjing, China, August 24-27, 2015},
  series = {LNAI},
}

@unpublished{timanyLogicalRelationsSafety,
  title = {Logical Relations: Safety of System {{F}}},
  author = {Timany, Amin},
  langid = {english},
  file = {/home/au711415/Work/Zotero/storage/2YIMHZYJ/Timany - Logical relations safety of system F.pdf}
}

@article{milnerTheoryTypePolymorphism1978,
  title = {A Theory of Type Polymorphism in Programming},
  author = {Milner, Robin},
  year = {1978},
  month = dec,
  journal = {Journal of Computer and System Sciences},
  volume = {17},
  number = {3},
  pages = {348--375},
  issn = {00220000},
  doi = {10.1016/0022-0000(78)90014-4},
  langid = {english},
  file = {/home/au711415/Work/Zotero/storage/DWWXDDWE/Milner - 1978 - A theory of type polymorphism in programming.pdf}
}

@article{wrightSyntacticApproachType1994,
author = {Wright, A.K. and Felleisen, M.},
title = {A Syntactic Approach to Type Soundness},
year = {1994},
issue_date = {Nov. 15, 1994},
publisher = {Academic Press, Inc.},
address = {USA},
volume = {115},
number = {1},
issn = {0890-5401},
url = {https://doi.org/10.1006/inco.1994.1093},
doi = {10.1006/inco.1994.1093},
abstract = {We present a new approach to proving type soundness for Hindley/Milner-style polymorphic type systems. The keys to our approach are (1) an adaptation of subject reduction theorems from combinatory logic to programming languages, and (2) the use of rewriting techniques for the specification of the language semantics. The approach easily extends from polymorphic functional languages to imperative languages that provide references, exceptions, continuations, and similar features. We illustrate the technique with a type soundness theorem for the core of Standard ML, which includes the first type soundness proof for polymorphic exceptions and continuations.},
journal = {Inf. Comput.},
month = {nov},
pages = {38–94},
numpages = {57}
}

@phdthesis{ahmedSemanticsTypesMutable2004,
  title = {Semantics of {{Types}} for {{Mutable State}}},
  author = {Ahmed, Amal},
  year = {2004},
  school = {Princeton University},
  file = {/home/au711415/Work/Zotero/storage/U88V3WC2/713.pdf}
}
