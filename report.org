#+title: Formalizing SystemF type safety with logical relation in Coq
#+AUTHOR: June Rousseau
#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage{pftools}
#+LATEX_HEADER: \usepackage{circledsteps}
#+LATEX_HEADER: \newcommand{\link}[1]{\href{#1}{\cstep}}
#+LATEX_HEADER: \newcommand{\unit}{\text{unit}}
#+LATEX_HEADER: \newcommand{\unitt}{\text{tt}}

#+LATEX_HEADER: \newcommand{\lrp}[2]{\llbracket #2 \rrbracket_{#1}}
#+LATEX_HEADER: \newcommand{\lr}[3]{\llbracket #2 \rrbracket_{#1}(#3)}
#+LATEX_HEADER: \newcommand{\lrv}[2]{\lr{#1}{#2}{v}}
#+LATEX_HEADER: \newcommand{\typed}[3]{#1 \vdash #2 : #3}
\begin{abstract}
Milner wrote "Well-typed does not go wrong". Type safety is a language property
that ensure that if a program is well-typed, it is safe to execute, ie. it will
not be stuck.
Logical relations are a proof method that have been efficient to prove
language properties, such as type safety.
During the lecture in class, we have defined and used a logical relation as a
proof method in order to prove the type safety of SystemF.
Everything on paper, and we assumed some intermediate lemmas. Some data
structures and encoding remained implicit. If one wants to have full trust on a
proof, we want to explicit every minutes details and prove every lemma used.
Proof-assistant as Coq helps to track each of them and make sure that every
proof goal is proved.
The project consists on implementing the logical relation in Coq and prove the
type safety of SystemF using the logical relation.
\end{abstract}
#+TOC: headlines 2

* Introduction
Type safety --- also known as /type soundness/ --- is a language property
ensuring that well-typed terms will never reach a stuck state. A naive approach
to prove type safety of a language is to proceed by induction on the structure
of type. However, this approach fails, because the induction hypothesis is too
weak.
In the literature, type safety is commonly proved using two auxiliary lemmas
known as /progress/ and /preservation/ (citations?). The former says that if an
expression is well-typed, it is either a value, or it can perform a step. The
later says that if an expression is well-typed, the next step will also be
well-typed.
Another way to prove type safety of SystemF is based on logical relation techniques.
Logical relation is a proof method that scales better on more expressive
language (*TODO CHECK?*) and that can be used to prove others language
properties, such as normalization, contextual equivalence or non-interference.
Moreover, the fundamental theorem of logical relation has useful consequences
besides type safety.

Defining logical relation on paper requires to keep track of plenty of minute
details. It is easy to miss an important detail, or to badly assume a lemma on
the relation. In order to get more confidence in our proof, one can use computer
proof-assistant, such as Coq, to help keeping track of all these details.

This report is organized as follows:
In section 2, we formalize the language SystemF (semantic and typing judgment),
the type safety property, the logical relation and we establish the main
theorem. In section 3, we present the different implementation options, and we
highlight the challenges of the implementation in Coq, contrasting with the
paper version of the proof. Finally in section 4, we present
improvement and alternatives of the implementation of the logical relation in
Coq, as well as possible extensions of the project.

The Coq implementation is available online:
https://github.com/BastienRousseau/Logrel_SystemF.
We use circled numbers to link directly to corresponding Coq formal statements
in the following.

* Type safety of SystemF on paper
In this section, we formalize on paper the language SystemF as it has been
implemented in Coq. We present the call-by-value (CBV) small-step semantic and
the typing judgment. Then, we formalize the type safety, the logical relation
and we establish the main theorems.
Most of the formalization is classic, mainly inspired by [Amin lecture notes]
but we adapted it in order to correspond to the Coq implementation.

** Language
The language we consider is a /variant/ of SystemF, that includes
\unit type and the product type with the projection. The representation of the
binders is based on DeBruijn index.
\input{figures/syntaxSF}
In figure \ref{fig:opsemSF}, we define the syntax of the variant of SystemF we use
in this project, as well as its operational semantic. The reader may notice that
an expression can be a variable $x \in \NN$, because the binder are DeBruijn
indices. Roughly, the variable $k$ points to the /k/-th enclosing \lambda. Section 3
will explain more precisely the reasons of this representation.
The semantic is a small-step semantic with a call-by-value strategy. The
notation $e.[v/]$ is the substitution of the /first/ free variable: it replaces
the free variable 0, and rename all the other variable consequently.
For instance, in the expression $(0,1).[\unitt/] = (\unitt, 0)$, the first free
variable is 0, thus it replaces 0 by the expression $\unitt$. Moreover, the next
free variable 1 is then renamed to 0. In the expression $1.[\unitt/] = 0$, the first
free variable should be 0 (even if it does not appears in the expression), thus
the substitution only perform the renaming.
Finally, when there is lambda abstraction like in the expression,
$(\lambda \_. (0,(1,2))).[\unitt/] = (\lambda \_. (0,(\unitt,1)))$, the substitution replace the
first free variable under the lambda abstraction and the renaming as well.
*TODO should i write the formal definition ?*.

\input{figures/typingSF}
Figure \ref{fig:typingSF} shows the types and the typing rules of SystemF.
In a similar way than the variable of the language, the type variable $\alpha \in \NN$
use the DeBruijn representation.
The typing rules are pretty usual, except the rule \textsc{T-TAbs} due to the
DeBruijn representation of the type variable. Indeed, the type abstraction adds
a new variable in the context, which means, in terms of DeBruijn indices, to
shift the indices by 1. This is precisely what the rule \textsc{T-TAbs} do: it
perform the right renaming.

*TODO transition sentence*

** Type safety and logical relation
*** Type safety
A term is safe if, when it can perform a step (according to the operational
semantic), it does not get stuck. In other words, the reduced expression is
either a value, or it can do another step.
We can also parameterize the safety predicate by a predicate $P$ on the values, such
that the reduced expression is either a value that respect the predicate
$P$, or it can do an additional step.
Formally, the parameterized safety predicate:
\[
\mathrm{Safe_{P}}(e) \eqdef
\forall e',\ e \step e' \Rightarrow (e' \in \mathrm{Val} \wedge P(v)) \vee \exists e'', e' \hstep e''
\]

The type safety of a language says that, as soon as a term is well-typed, the
the term is safe.
\[\forall e,\ \tau.\ \typed{\bullet}{e}{\tau} \Rightarrow \mathrm{Safe}(e) \]
where $\mathrm{Safe}(e) = \mathrm{Safe}_{(\mathrm{fun \_} \Rightarrow\ \top)}(e)$

*** Logical relation
As explained in Section 1, we can prove type safety of SystemF using progress
and preservation, but in our case, we use logical relation. We note the logical
relation $\lr{\xi}{\tau}{v}$, where $\xi \in \mathrm{var} \rightarrow (\mathrm{expr} \rightarrow \PP)$ maps
variable to an expression property.
We define the logical relation on induction on type in Figure \ref{fig:logrelSF}.
\input{figures/logicalrelationSF}

The proof method based on logical relation decompose the type safety theorem in
two lemmas:
1. a term that is well-typed is in the logical relation
\[\forall e,\ \tau.\ \typed{\bullet}{e}{\tau} \Rightarrow \lr{\bullet}{e}{\tau} \]
2. a term in the logical relation is safe
\[\forall e,\ \tau.\ \lr{\bullet}{e}{\tau} \Rightarrow \mathrm{Safe}(e) \]

The second lemma is almost trivial, because the safety is basically baked in the
logical relation itself.
The first lemma is however the interesting part of the proof. In order to prove
it, we first need to generalized the lemma.
The generalized version is the so called *Fundamental Theorem of Logical
Relation* (FTLR).

To define the FTLR, we first need to introduce the semantic substitution.
We note $\gamma$ a substitution, which maps expression variables to
expressions, and $\Gamma$ the typing context, which maps expression variables their
type.
We say that the substitution $\gamma$ satisfies the typing context $\Gamma$ for the
predicate $P \in \mathrm{type} \rightarrow \mathrm{expr} \rightarrow \PP$, written $\gamma \Mapsto_{P} \Gamma$,
if for all variables \footnote{We assume that the domain of $\gamma$ and $\Gamma$ are equals.}
in $\gamma$, the predicate $P$ holds for the mapped expression and
their corresponding type in $\Gamma$.

The FTLR
\[\forall e,\ \tau,\ \Gamma.\ \typed{\bullet}{e}{\tau} \Rightarrow
(\forall \xi,\ \gamma.\ (\gamma \Mapsto_{P} \Gamma) \Rightarrow \lr{\xi}{e}{\gamma(\tau)}) \]
with $P = \mathrm{fun\ \tau\ e} \rightarrow \lr{\xi}{\tau}{e}$.


*** Free theorems
The FTLR has other consequences than just type safety. It can also be used to
derive free theorems, /Ã  la/ Wadler (cf. Theorem for free).
We prove the two following theorems:
- any polymorphic expression that is typed with the identity type $\forall \alpha, \alpha \rightarrow \alpha$
  is indeed the identity function, \ie if we apply the expression to a value
  $v$, it will reduce the value $v$ itself\footnote{If it terminates}.
  \[\forall e\ v,\ \typed{\bullet}{\forall \_.\ 0 \rightarrow 0}{e}
  \Rightarrow \mathrm{Safe}_{(\mathrm{fun}\ e \rightarrow e = ev)}((e\ \_)\ v)
  \]
- any polymorphic expression that is typed with the type $\forall \alpha, \alpha$ is actually
  the empty type, which is indeed uninhabited.
  \[\forall e\ v,\ \typed{\bullet}{\forall \_.\ 0 }{e}
  \Rightarrow \mathrm{Safe}_{(\mathrm{fun}\ e \rightarrow \bot )}(e\ \_)
  \]

* Implementation in Coq
In this section, we describe the different implementations options that we had
and we explain the choices that we made.

** SystemF (evaluation context)
The operational semantic of SystemF follows a call-by-value evaluation strategy,
small step semantic.
We had in mind two possible solutions to implement SystemF CBV.
1. A semantic that explicit every single rule: for each expression, we define a
   rule that describes its reduction.
2. A semantic in two steps: a head reduction relation, which expresses how to
   reduce the relation when the redex is in head position; and a non-head
   reduction relation, when the redex is not is the head position. The
   evaluation context determine where the redex is in the term.

The two semantics are equivalent (cf. proof), and both implementations have
their own pros and cons.
The main characteristic that will be help to do the choice is the
the /safe-bind/ lemma :
\[\forall P\ Q\ e,\ \mathrm{Safe}_{Q}(e) \Rightarrow
(\forall v,\ Q\ v \Rightarrow \mathrm{Safe}_{P}(E[v])) \Rightarrow
\mathrm{Safe}_{P}(E[e])) \]

On the one hand, the structural induction is easier when the semantic describes
every single rules (1), but we have to prove an equivalent version of the
/safe-bind/ lemma on the fly for each induction case in the fundamental theorem.
On the other hand, the evaluation context semantic (2) is convenient to define
the /safe-bind/ lemma, but the induction cases are more tedious to use. Indeed,
small-step semantic with evaluation context has two reduction relations: in
particular, the non-head reduction relation requires us to destruct the context.

*TODO* we want to stick to the lecture note as much as possible. Better for
improvement cf next section.
In the end, we used the second semantic to focus on the implementation of the
logical relation, as well as the intermediate lemmas.

** Binders (autosubst)
Our first attempt to represent the binding was to implement them using strings.
The advantage of representing the binder using strings is that it makes the
proof --- especially on paper --- more readable.
However, this representation tends to induces some issues because the terms are
equals "up-to renaming of bound variable", and the substitution has to be
capture avoiding.
Moreover, we need to define the parallel (or simultaneous) substitution at some
point, and use this definition to do Coq proof, which is a pain to work with
when defined using strings.

Because the binder representation using string is not satisfactory when
implementing the language in Coq, we had to explore other binding
representations. The question of the implementation of binders is a well-known
issue when implementing a language (cf. TAPL). A solution is the DeBruijn
representation of the binders. It is a canonical, unique and nameless
representation of the binder, in which a variable points directly to its binder:
the named variables are replaced by a natural number that express the distance
to its binder. More precisely, the DeBruijn index k points to the k-th enclosing
\lambda.

The De Bruijn techniques has been widely used to represent binders. /autosubst/
is a Coq library that helps to implement and automatize the DeBruijn
representation, and automatically derive and prove some basic lemma about the
(parallel substitution). Provide tactics for the substitution operation.

Our implementation uses /autosubst/ to represent the binders and leverage the
automation to simplify the proofs, in particular for the substitution lemma and
the weakening lemma.

*TODO* should I use the string representation in Section 2, and explain the
DeBruijn representation here instead ? Or here I only explain the reasons of my
choice

*TODO* Example of lemma that was hard to prove with named binders, but easier
with autosubst ?

** Substitution and weakening lemmas
One of the main property of the logical relation is the following /substitution
lemma/.
\[
\forall \xi,\ \tau,\ \tau',\ v.\
\lrv{\xi}{ \tau.[\tau'/]}
\Leftrightarrow
\lrv{(\lrp{\xi}{\tau'}::\xi)}{\tau}
\]
It states that a value $v$ is in the logical relation for the type
$\tau.[\tau'/]$ iff we can associate its own logical relation to the corresponding
free type variable in the interpretation mapping.

However, while the lecture notes uses strings to represent the free variable and
can proceed by straightforward induction on $\tau$ (?), we cannot proceed directly
by induction with our representation based on the DeBruijn indices. The
induction hypothesis is indeed not strong enough.

The polymorphic type case does not work:
let the induction hypothesis be
\[
\forall \xi,\ \tau,\ \tau',\ v.\
\lrv{\xi}{ \tau.[\tau'/]}
\Leftrightarrow
\lrv{(\lrp{\xi}{\tau'}::\xi)}{\tau}
\]

The proof obligation for the polymorphic case is
\[
\lrv{\xi}{(\forall \_.\ \tau).[\tau'/]}
\Leftrightarrow
\lrv{(\lrp{\xi}{\tau'}::\xi)}{(\forall \_.\ \tau)}
\]

If we unfold the definition of the logical relation,
the proof obligation roughly ends up to look like
\[
\lrv{P::\xi}{\tau.[\tau'/]}
\Leftrightarrow
\lrv{P::(\lrp{\xi}{\tau'}::\xi)}{\tau}
\]
where an additional predicate $P$ is the head of the mapping $\xi$.
While we would like to use the IH, it is not possible because the head of the
mapping has to be the property of the substituted type variable $\tau'$.

The solution is then to generalized the substitution lemma, such that the
predicate that maps the substituted type variable $\tau'$ to the logical relation
may be anywhere in the new mapping. From a higher level, it means that had
already gone through a certain number of type abstraction.

\[
\forall \xi_{1},\ \xi_{2},\ \tau',\ v.\
\lrv{ \xi_{1}++\xi_{2}}{ \tau.[\mathrm{upn}\ (\mathrm{len }\ \xi_{1}) \tau'/]}
\Leftrightarrow
\lrv{ \xi_{1}++( \lrp{\xi_{2}}{\tau'} ::\xi_{2})}{\tau}
\]
where $\tau.[\mathrm{upn}\ (\mathrm{len }\ \xi_{1}) \tau'/]$
substitutes $\tau'$ in the type $\tau$ by renaming the variables after $(\mathrm{len }\ \xi_{1})$.
It suffices to 1 the generalized theorem with $\xi_{1} = \mathrm{nil}$
to get the substitution lemma.

** N-steps
Why did I need to define a n-step reduction relation.

* Possible improvement / Future work
** Language independent lemmas
Some lemmas are not SystemF specific. We could define a class that express what
is a valid language, giving:
- the type of expression of the language $expr$
- a function $is\_value: expr \rightarrow Prop$ that express which expression are the values
  of the language
- a function $head\_step: expr \rightarrow expr \rightarrow Prop$ that express the head reduction
  relation
- a function $is\_ectx: (expr \rightarrow expr) \rightarrow Prop$ that express how to
  determine the evaluation context when the redex is not in head position

Which properties on the language are necessary for the language to be valid ?
All the "safe" lemmas (safe-mono, safe-val, safe-bind, safe-step) should be
language independent. Thus, these are free lemmas once we have proved that
SystemF CBV is a valid language, and we could re-use them for other language
(e.g. STLC)

** Logical relation using Iris
Iris provides a nice framework to define logical relation. Because step-indexed
logic, we can extend SystemF with recursive types and pointer.

** Normalization STLC / SystemF
Another interesting language property that can be proved using logical relation
is normalization.

* Ideas :noexport:
** SystemF type safety with logical relation
    As we have seen in the lecture
** Formalize directly Amin's lecture note from the lecture
** Use strings to represent the binders as a first step
But the simultaneous substitution was a pain to work with
** Replace string binders with De Bruijn binders, using autosubst
** Remaining work
- Bunch of intermediate lemmas about substitution to prove
- Main type safety theorem
- Free theorems ?
