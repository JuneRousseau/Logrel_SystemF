#+title: Formalizing SystemF type safety with logical relation in Coq
#+AUTHOR: June Rousseau
#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage{pftools}
#+LATEX_HEADER: \usepackage{circledsteps}
#+LATEX_HEADER: \newcommand{\link}[1]{\href{#1}{\cstep}}

\begin{abstract}
Milner wrote "Well-typed does not go wrong". Type safety is a language property
that ensure that if a program is well-typed, it is safe to execute, ie. it will
not be stuck.
Logical relations are a proof method that have been efficient to prove
language properties, such as type safety.
During the lecture in class, we have defined and used a logical relation as a
proof method in order to prove the type safety of SystemF.
Everything on paper, and we assumed some intermediate lemmas. Some data
structures and encoding remained implicit. If one wants to have full trust on a
proof, we want to explicit every minutes details and prove every lemma used.
Proof-assistant as Coq helps to track each of them and make sure that every
proof goal is proved.
The project consists on implementing the logical relation in Coq and prove the
type safety of SystemF using the logical relation.
\end{abstract}
#+TOC: headlines 2

* Introduction
Type safety by naive induction does not work, because the induction hypothesis
is too weak.
Usual methods to prove type safety are based on the intermediates
properties so called /progress/ and /preservation/.
The former says that if an expression is well-typed and not a value, it can do a
step. The later says that if an expression is well-typed, the next step will
also be well-typed.
However, another method based on logical relation (why is it better?).

This report is organized as follows:
In section 2, we formalize the language SystemF (semantic and typing judgment),
the type safety property, the logical relation and we establish the main
theorem. In section 3, we present the different implementation options, and we
highlight the challenges of the implementation in Coq, contrasting with the
paper version of the proof. Finally in section 4, we present
improvement and alternatives of the implementation of the logical relation in
Coq, as well as possible extensions of the project.

The Coq implementation is available online:
https://github.com/BastienRousseau/Logrel_SystemF.
We use circled numbers to link directly
to corresponding Coq formal statements in the following.

* Type safety of SystemF on paper
In this section, we formalize on paper the language SystemF as it has been
implemented in Coq. We present the call-by-value (CBV) small-step semantic and
the typing judgment. Then, we formalize the type safety, the logical relation
and we establish the main theorems.
Most of the formalization is classic, mainly inspired by [Amin lecture notes]
but we adapted it in order to correspond to the Coq implementation.

** Language
Representation of the binder using DeBruijn index. More explanation about this
choice in section 3.
Explanation of the substitution.

\input{figures/syntaxSF}

Focus on the rules \textsc{T-TAbs} because of the renaming.
\input{figures/typingSF}

** Type safety and logical relation
*** Type safety
A term is safe if, when it can perform a step (according to the operational
semantic), it does not get stuck. In other words, the reduced expression is
either a value, or it can do another step.
We can also parameterize the safety predicate by a predicate $P$ on the values, such
that the reduced expression is either a value that respect the predicate
$P$, or it can do an additional step.
Formally, the parameterized safety predicate:
\[
\mathrm{Safe_{P}}(e) \eqdef
\forall e',\ e \step e' \Rightarrow (e' \in \mathrm{Val} \wedge P(v)) \vee \exists e'', e' \hstep e''
\]

The type safety of a language says that, as soon as a term is well-typed, the
the term is safe.
\[\forall e,\ \tau.\ \typed{\bullet}{e}{\tau} \Rightarrow \mathrm{Safe}(e) \]

*** Logical relation
We can prove type safety of SystemF using progress and preservation, but we use
logical relation. We define the logical relation on induction on type as follows:

\input{figures/logicalrelationSF}

Using the previously defined logical relation, we can decompose the type safety
theorem in two lemmas:
- well-typed implies LR
- LR implies type safe (trivial, because safety is baked in the LR)

To prove the first lemma, we must generalized it, which gives us the so called
*Fundamental Theorem of Logical Relation* (FTLR).

*** Free theorems
The FTLR has other consequences than just type safety. It can also be used to
derive free theorems, /à la/ Wadler (cf. Theorem for free).
We prove the two following theorems:
- identity function
\link{https://github.com/BastienRousseau/Logrel_SystemF/blob/fdab04fbb674a93b9b21aeb94efe3073a7de7521/theories/free_theorem.v#L8}
- empty type
\link{https://github.com/BastienRousseau/Logrel_SystemF/blob/fdab04fbb674a93b9b21aeb94efe3073a7de7521/theories/free_theorem.v#L35}

* Implementation in Coq
In this section, we expose the different implementations options that we had, we
describes the solutions and explain the choices that we made.

** SystemF (evaluation context)
The operational semantic of SystemF follows a call-by-value evaluation strategy,
small step semantic.
We had in mind two possible solutions to implement SystemF CBV.
1. A semantic that explicit every single rule: for each expression, we define a
   rule that describes its reduction.
2. A semantic in two steps: a head reduction relation, which expresses how to
   reduce the relation when the redex is in head position; and a non-head
   reduction relation, when the redex is not is the head position. The
   evaluation context determine where the redex is in the term.

The two semantics are equivalent (cf. proof), and both implementations have
their own pros and cons. The induction is easier when the semantic describes
every single rules, but we have to prove the (safe bind lemma ?) on the fly for
each induction case in the fundamental theorem. On the other hand, the
evaluation context semantic is convenient to define the generalized (safe bind
lemma), but the induction cases are more tedious to use. (why ? induction,
inversion and so on).

In the end, we used the second semantic to focus on the implementation of the
logical relation, as well as the intermediate lemmas.

** Binders (autosubst)
Binders er træls.
Implementation of the binders using strings, but it was really a pain to work
with the simultaneous substitution, and I struggle to define the substitution
(or weaken) lemma correctly. Also, up-to-renaming.
Binders are a well-known issue when implementing a language (cf. TAPL).
DeBruijn representation of the binders. Canonical and unique representation of
the binder. Nameless representation in which a variable points directly to its
binder: the named variables are replaced by a natural number that express the
distance to its binder. More precisely, the DeBruijn index k points to the k-th
enclosing \lambda.

For example, we can encode the term
$\lambda x.\ \lambda y.\ (x y)$ using the DeBruijn indices as $\lambda \_.\ \lambda \_.\ (1 0)$.
Example of substitution.

Implementation using autosubst, a Coq library which automatize the DeBruijn
representation, and automatically prove some basic lemma about the (parallel
substitution). Provide tactics for the substitution operation.

Example of lemma that was hard to prove with named binders, but easier with
autosubst ?

** Substitution and weakening lemmas
One of the main property of the logical relation is the following /substitution
lemma/. It states that
a value $v$ is in the logical relation for the type $\tau.[\tau']$ iff we can
associate its own logical relation to the corresponding free type variable in
the interpretation mapping.

(Substitution lemma)
However, while the lecture notes uses strings to represent the free variable and
can proceed by straightforward induction on $\tau$ (?), we cannot proceed directly
by induction with our representation based on the DeBruijn indices. The
induction hypothesis is indeed not strong enough.
*TODO*: show the case that does not work and where the IH is not enough.
The solution is first to show a generalized version of the substitution lemma,
and then instantiate it to prove the substitution lemma.

\link{https://github.com/BastienRousseau/Logrel_SystemF/blob/fdab04fbb674a93b9b21aeb94efe3073a7de7521/theories/logrel.v#L325}

\[
\forall \xi_{1},\ \xi_{2},\ \tau',\ v.\
\lrv{ \xi_{1}++\xi_{2}}{ \tau.[\mathrm{upn}\ (\mathrm{len }\ \xi_{1}) \tau'/]}
\Leftrightarrow
\lrv{ \xi_{1}++( \lrp{\xi_{2}}{\tau'} ::\xi_{2})}{\tau}
\]
where $\tau.[\mathrm{upn}\ (\mathrm{len }\ \xi_{1}) \tau'/]$
substitutes $\tau'$ in the type $\tau$ by renaming the variables *TODO*.

** N-steps
Why did I need to define a n-step reduction relation.


* Possible improvement / Future work
** Language independent lemmas
Some lemmas are not SystemF specific. We could define a class that express what
is a valid language, giving:
- the type of expression of the language $expr$
- a function $is\_value: expr \rightarrow Prop$ that express which expression are the values
  of the language
- a function $head\_step: expr \rightarrow expr \rightarrow Prop$ that express the head reduction
  relation
- a function $is\_ectx: (expr \rightarrow expr) \rightarrow Prop$ that express how to
  determine the evaluation context when the redex is not in head position

Which properties on the language are necessary for the language to be valid ?
All the "safe" lemmas (safe-mono, safe-val, safe-bind, safe-step) should be
language independent. Thus, these are free lemmas once we have proved that
SystemF CBV is a valid language, and we could re-use them for other language
(e.g. STLC)

** Logical relation using Iris
Iris provides a nice framework to define logical relation. Because step-indexed
logic, we can extend SystemF with recursive types and pointer.

** Normalization STLC / SystemF
Another interesting language property that can be proved using logical relation
is normalization.


* Ideas :noexport:
** SystemF type safety with logical relation
    As we have seen in the lecture
** Formalize directly Amin's lecture note from the lecture
** Use strings to represent the binders as a first step
But the simultaneous substitution was a pain to work with
** Replace string binders with De Bruijn binders, using autosubst
** Remaining work
- Bunch of intermediate lemmas about substitution to prove
- Main type safety theorem
- Free theorems ?
